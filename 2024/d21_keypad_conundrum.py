import aoc

NUM_PAD = ['789',
           '456',
           '123',
           ' 0A']
NUM_C_TO_ARROWS = {
    '7': {
        '7': [''], '8': ['>'], '9': ['>>'],
        '4': ['v'], '5': ['>v', 'v>'], '6': ['>>v', '>v>', 'v>>'],
        '1': ['vv'], '2': ['>vv', 'v>v', 'vv>'], '3': ['>>vv', '>v>v', '>vv>', 'v>>v', 'v>v>', 'vv>>'],
        '0': ['>vvv', 'v>vv', 'vv>v'], 'A': ['>>vvv', '>v>vv', '>vv>v', '>vvv>', 'v>>vv', 'v>v>v', 'v>vv>', 'vv>>v', 'vv>v>']
    },
    '8': {
        '7': ['<'], '8': [''], '9': ['>'],
        '4': ['<v', 'v<'], '5': ['v'], '6': ['>v', 'v>'],
        '1': ['<vv', 'v<v', 'vv<'], '2': ['vv'], '3': ['>vv', 'v>v', 'vv>'],
        '0': ['vvv'], 'A': ['>vvv', 'v>vv', 'vv>v', 'vvv>']
    },
    '9': {
        '7': ['<<'], '8': ['<'], '9': [''],
        '4': ['<<v', '<v<', 'v<<'], '5': ['<v', 'v<'], '6': ['v'],
        '1': ['<<vv', '<v<v', '<vv<', 'v<<v', 'v<v<', 'vv<<'], '2': ['<vv', 'v<v', 'vv<'], '3': ['vv'],
        '0': ['<vvv', 'v<vv', 'vv<v', 'vvv<'], 'A': ['vvv']
    },
    '4': {
        '7': ['^'], '8': ['>^', '^>'], '9': ['>>^', '>^>', '^>>'],
        '4': [''], '5': ['>'], '6': ['>>'],
        '1': ['v'], '2': ['>v', 'v>'], '3': ['>>v', '>v>', 'v>>'],
        '0': ['>vv', 'v>v'], 'A': ['>>vv', '>v>v', '>vv>', 'v>>v', 'v>v>']
    },
    '5': {
        '7': ['<^', '^<'], '8': ['^'], '9': ['>^', '^>'],
        '4': ['<'], '5': [''], '6': ['>'],
        '1': ['<v', 'v<'], '2': ['v'], '3': ['>v', 'v>'],
        '0': ['vv'], 'A': ['>vv', 'v>v', 'vv>']
    },
    '6': {
        '7': ['<<^', '<^<', '^<<'], '8': ['<^', '^<'], '9': ['^'],
        '4': ['<<'], '5': ['<'], '6': [''],
        '1': ['<<v', '<v<', 'v<<'], '2': ['<v', 'v<'], '3': ['v'],
        '0': ['<vv', 'v<v', 'vv<'], 'A': ['vv']
    },
    '1': {
        '7': ['^^'], '8': ['>^^', '^>^', '^^>'], '9': ['>>^^', '>^>^', '>^^>', '^>>^', '^>^>', '^^>>'],
        '4': ['^'], '5': ['>^', '^>'], '6': ['>>^', '>^>', '^>>'],
        '1': [''], '2': ['>'], '3': ['>>'],
        '0': ['>v'], 'A': ['>>v', '>v>']
    },
    '2': {
        '7': ['<^^', '^<^', '^^<'], '8': ['^^'], '9': ['>^^', '^>^', '^^>'],
        '4': ['<^', '^<'], '5': ['^'], '6': ['>^', '^>'],
        '1': ['<'], '2': [''], '3': ['>'],
        '0': ['v'], 'A': ['>v', 'v>']
    },
    '3': {
        '7': ['<<^^', '<^<^', '<^^<', '^<<^', '^<^<', '^^<<'], '8': ['<^^', '^<^', '^^<'], '9': ['^^'],
        '4': ['<<^', '<^<', '^<<'], '5': ['<^', '^<'], '6': ['^'],
        '1': ['<<'], '2': ['<'], '3': [''],
        '0': ['<v', 'v<'], 'A': ['v']
    },
    '0': {
        '7': ['^<^^', '^^<^', '^^^<'], '8': ['^^^'], '9': ['>^^^', '^>^^', '^^>^', '^^^>'],
        '4': ['^<^', '^^<'], '5': ['^^'], '6': ['>^^', '^>^', '^^>'],
        '1': ['^<'], '2': ['^'], '3': ['>^', '^>'],
        '0': [''], 'A': ['>']
    },
    'A': {
        '7': ['<^<^^', '<^^<^', '<^^^<', '^<<^^', '^<^<^', '^<^^<', '^^<<^', '^^<^<', '^^^<<'], '8': ['<^^^', '^<^^', '^^<^', '^^^<'], '9': ['^^^'],
        '4': ['<^<^', '<^^<', '^<<^', '^<^<', '^^<<'], '5': ['<^^', '^<^', '^^<'], '6': ['^^'],
        '1': ['<^<', '^<<'], '2': ['<^', '^<'], '3': ['^'],
        '0': ['<'], 'A': ['']
    }
}

KEY_PAD = [' ^A',
           '<v>']
KEY_C_TO_ARROWS = {
    '^': {
        '^': [''], 'A': ['>'],
        '<': ['v<'], 'v': ['v'], '>': ['>v', 'v>']
    },
    'A': {
        '^': ['<'], 'A': [''],
        '<': ['<v<', 'v<<'], 'v': ['<v', 'v<'], '>': ['v']
    },
    '<': {
        '^': ['>^'], 'A': ['>>^', '>^>'],
        '<': [''], 'v': ['>'], '>': ['>>']
    },
    'v': {
        '^': ['^'], 'A': ['>^', '^>'],
        '<': ['<'], 'v': [''], '>': ['>']
    },
    '>': {
        '^': ['<^', '^<'], 'A': ['^'],
        '<': ['<<'], 'v': ['<'], '>': ['']
    }
}


def get_answer(lines, part):
    codes = lines

    depth = 2 if part == 1 else 25

    memo = dict()
    answer = 0
    for code in codes:
        length = 0
        c_prev = 'A'
        for c in code:
            length += min(get_sequence_length(arrows + 'A', depth, memo) for arrows in NUM_C_TO_ARROWS[c_prev][c])
            c_prev = c
        answer += length * int(code[:3])
    return answer


def get_sequence_length(sequence, depth, memo):
    if depth == 0:
        return len(sequence)

    length = 0
    c_prev = 'A'
    for c in sequence:
        length += get_transition_length(c_prev, c, depth, memo)
        c_prev = c
    return length


def get_transition_length(c_prev, c, depth, memo):
    if c_prev in memo.keys() and c in memo[c_prev].keys() and depth in memo[c_prev][c].keys():
        return memo[c_prev][c][depth]

    length = min(get_sequence_length(arrows + 'A', depth - 1, memo) for arrows in KEY_C_TO_ARROWS[c_prev][c])

    if c_prev not in memo.keys():
        memo[c_prev] = dict()
    if c not in memo[c_prev].keys():
        memo[c_prev][c] = dict()
    if depth not in memo[c_prev][c].keys():
        memo[c_prev][c][depth] = dict()
    memo[c_prev][c][depth] = length
    return length


if __name__ == '__main__':
    aoc.solve(21, get_answer)
